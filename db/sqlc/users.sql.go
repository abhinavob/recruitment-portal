// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const approveRecruiter = `-- name: ApproveRecruiter :exec
UPDATE users SET role = 'recruiter' WHERE id = $1
`

func (q *Queries) ApproveRecruiter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, approveRecruiter, id)
	return err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (id, recruiter_id, name, description, logo)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, recruiter_id, name, description, logo, created_at
`

type CreateCompanyParams struct {
	ID          uuid.UUID
	RecruiterID uuid.NullUUID
	Name        string
	Description sql.NullString
	Logo        sql.NullString
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.ID,
		arg.RecruiterID,
		arg.Name,
		arg.Description,
		arg.Logo,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RecruiterID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const createJobPost = `-- name: CreateJobPost :exec
INSERT INTO job_postings (id, recruiter_id, company_id, company_name, position, skills, description, salary)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateJobPostParams struct {
	ID          uuid.UUID
	RecruiterID uuid.NullUUID
	CompanyID   uuid.NullUUID
	CompanyName string
	Position    string
	Skills      []string
	Description sql.NullString
	Salary      sql.NullString
}

func (q *Queries) CreateJobPost(ctx context.Context, arg CreateJobPostParams) error {
	_, err := q.db.ExecContext(ctx, createJobPost,
		arg.ID,
		arg.RecruiterID,
		arg.CompanyID,
		arg.CompanyName,
		arg.Position,
		pq.Array(arg.Skills),
		arg.Description,
		arg.Salary,
	)
	return err
}

const createOrUpdateSession = `-- name: CreateOrUpdateSession :one
INSERT INTO sessions (user_id, token)
VALUES ($1, $2)
ON CONFLICT (token) 
DO UPDATE SET 
    user_id = EXCLUDED.user_id,
    created_at = now()
RETURNING user_id, token, created_at
`

type CreateOrUpdateSessionParams struct {
	UserID uuid.NullUUID
	Token  string
}

func (q *Queries) CreateOrUpdateSession(ctx context.Context, arg CreateOrUpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateSession, arg.UserID, arg.Token)
	var i Session
	err := row.Scan(&i.UserID, &i.Token, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, picture, role)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, picture, role, created_at
`

type CreateUserParams struct {
	Name    string
	Email   string
	Picture sql.NullString
	Role    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Picture,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJobPost = `-- name: DeleteJobPost :exec
DELETE FROM job_postings WHERE id = $1
`

func (q *Queries) DeleteJobPost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteJobPost, id)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE user_id = $1 AND token = $2
`

type DeleteSessionParams struct {
	UserID uuid.NullUUID
	Token  string
}

func (q *Queries) DeleteSession(ctx context.Context, arg DeleteSessionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSession, arg.UserID, arg.Token)
	return err
}

const getAllJobPosts = `-- name: GetAllJobPosts :many
SELECT id, recruiter_id, company_id, company_name, position, skills, description, salary, created_at FROM job_postings
`

func (q *Queries) GetAllJobPosts(ctx context.Context) ([]JobPosting, error) {
	rows, err := q.db.QueryContext(ctx, getAllJobPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobPosting
	for rows.Next() {
		var i JobPosting
		if err := rows.Scan(
			&i.ID,
			&i.RecruiterID,
			&i.CompanyID,
			&i.CompanyName,
			&i.Position,
			pq.Array(&i.Skills),
			&i.Description,
			&i.Salary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, picture, role FROM users WHERE role IN ('applicant', 'recruiter')
`

type GetAllUsersRow struct {
	ID      uuid.UUID
	Name    string
	Email   string
	Picture sql.NullString
	Role    string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Picture,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByRecruiterID = `-- name: GetCompanyByRecruiterID :one
SELECT id, recruiter_id, name, description, logo, created_at FROM companies WHERE recruiter_id = $1
`

func (q *Queries) GetCompanyByRecruiterID(ctx context.Context, recruiterID uuid.NullUUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByRecruiterID, recruiterID)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RecruiterID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const getPendingRecruiters = `-- name: GetPendingRecruiters :many
SELECT id, name, email, picture FROM users WHERE role = 'pending'
`

type GetPendingRecruitersRow struct {
	ID      uuid.UUID
	Name    string
	Email   string
	Picture sql.NullString
}

func (q *Queries) GetPendingRecruiters(ctx context.Context) ([]GetPendingRecruitersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingRecruiters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingRecruitersRow
	for rows.Next() {
		var i GetPendingRecruitersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT user_id, token, created_at FROM sessions WHERE token = $1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Session
	err := row.Scan(&i.UserID, &i.Token, &i.CreatedAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, picture, role, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Picture,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const rejectCompany = `-- name: RejectCompany :exec
DELETE FROM companies WHERE recruiter_id = $1
`

func (q *Queries) RejectCompany(ctx context.Context, recruiterID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, rejectCompany, recruiterID)
	return err
}

const rejectRecruiter = `-- name: RejectRecruiter :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) RejectRecruiter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, rejectRecruiter, id)
	return err
}

const updateApplicantSkills = `-- name: UpdateApplicantSkills :exec
INSERT INTO applicant_skill_sets (applicant_id, skills)
VALUES ($1, $2) ON CONFLICT (applicant_id) DO UPDATE SET skills = $2
`

type UpdateApplicantSkillsParams struct {
	ApplicantID uuid.UUID
	Skills      []string
}

func (q *Queries) UpdateApplicantSkills(ctx context.Context, arg UpdateApplicantSkillsParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicantSkills, arg.ApplicantID, pq.Array(arg.Skills))
	return err
}
